#!/bin/bash
# This program is free software: you can redistribute it and/or modify it
# under the terms of the the GNU General Public License version 3, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranties of
# MERCHANTABILITY, SATISFACTORY QUALITY or FITNESS FOR A PARTICULAR
# PURPOSE.  See the applicable version of the GNU General Public
# License for more details.
#.
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright (C) 2020 Canonical, Ltd.

GCC="aarch64-linux-gnu-gcc"
OBJCOPY="aarch64-linux-gnu-objcopy"
STRIP="aarch64-linux-gnu-strip"

# gadget amboot root
AMBOOT=${1}
IMAGE_DIR=${2}
OUTPUR_DIR=${3}
if [ -n "${4}" ]; then
   KEYS=${4}
else
   KEYS=${SNAP}/keys
fi

ARCH=$(grep CONFIG_ARCH ${AMBOOT}/include/config.h | awk '{print $2}'| cut -c 13-)
BSP=$(grep CONFIG_BSP ${AMBOOT}/include/config.h | awk '{print $2}'| cut -c 18-)
CPU=$(grep CONFIG_CPU ${AMBOOT}/include/config.h | awk '{print $2}'| cut -c 12-)
SECURE_BOOT=$(grep "^#define CONFIG_TRUSTZONE_SECURE_BOOT" ${AMBOOT}/include/config.h | awk '{print $3}')
echo "Building for: ARCH=${ARCH} , BSP=${BSP} , CPU=${CPU}, SECURE_BOOT=${SECURE_BOOT} BUILD_TYPE=${BUILD_TYPE}"

if [ ! -e ${AMBOOT}/.uc-image-config ]; then
  echo -e "Missing Ubuntu Core image configuration (uc-image-config)"
  echo -e "Check and ensure gadget snap contains this configuration"
  exit 0
else
  source ${AMBOOT}/.uc-image-config
fi

AFLAGS="-march=armv8-a+crc+crypto -mgeneral-regs-only -fomit-frame-pointer -fno-common \
-nostdinc -D__ASM__ -D__BUILD_AMBOOT__ -D__ARCH_${ARCH}__ -D__BSP_${BSP}__ -D__${CPU}__"
AINCLUDES="-I${AMBOOT}/include"

DDATE=$(date +"-D__YEAR__=%Y -D__MONTH__=%-m -D__DAY__=%-d")

echo "Building fw files"
for fw in ${FW_FILES_TO_BUILD}
do
  # if image name is not defined, it is {fw} + .bin
  if [ -n "${IMAGE_MAP["${fw}"]}" ]; then
    IN_IMAGE="${IMAGE_DIR}/${IMAGE_MAP["${fw}"]}"
  else
    IN_IMAGE="${IMAGE_DIR}/${fw}.bin"
  fi
  # if we have secure boot, use signed images for bst and atf
  if [ "${SECURE_BOOT}" = "1" ]; then
    if [ "${fw}" = "bst_${BUILD_TYPE}" ] || [ "${fw}" = "atf" ]; then
      if [ -f ${IN_IMAGE}.signed ]; then
        IN_IMAGE=${IN_IMAGE}.signed
        echo -e "\t\tusing signed image for ${fw}"
      fi
    elif [ "${fw}" = "bld_${BUILD_TYPE}" ]; then
        echo -e "\t\tusing fip image for secure boot instead of ${fw}.bin"
        IN_IMAGE="${IMAGE_DIR}/fip.bin"
    fi
  fi
  if [ -n "${FW_NAME_MAP["${fw}"]}" ]; then
    OUT_FW="${FW_DIR}/${FW_NAME_MAP["${fw}"]}"
    OUT_ZFW="${FW_DIR}/z${FW_NAME_MAP["${fw}"]}"
  else
    OUT_FW="${FW_DIR}/${fw}.fw"
    OUT_ZFW="${FW_DIR}/z${fw}.fw"
  fi
  # if firmware image binary file does not exist, build empty fw file
  if [ -f ${IN_IMAGE} ]; then
      echo -e "\tBuilding fw file for ${fw}..."
      DIMGLEN="-DIMG_LEN=$(stat -L -c%s ${IN_IMAGE})"
      DCRC32="-DCRC32=0x$(rhash --bsd -C ${IN_IMAGE} | awk '{print $4}')"
      ${GCC} ${AFLAGS} ${AINCLUDES} \
        -DRPK_IMG=${KEYS}/rot_public.bin \
        ${DCRC32} ${DIMGLEN} ${DDATE} \
        -DVERSION_INFO=${AMBOOT}/vif/${VIF_MAP["${fw}"]} \
        -DINCBIN=${IN_IMAGE} \
        -c ${AMBOOT}/piggy/${PIGGY_MAP["${fw}"]} \
        -o ${OUT_FW}
  else
      echo -e "\tBuilding empty fw file for ${fw}..."
      ${GCC} ${AFLAGS} ${AINCLUDES} \
        -c ${AMBOOT}/piggy/${PIGGY_MAP["${fw}"]} \
        -o ${OUT_FW}
  fi
  if [ -e ${OUT_FW} ]; then
    ${OBJCOPY} -j .text -O elf64-littleaarch64 ${OUT_FW} ${OUT_FW}
  else
    echo "!!!Failed to build fw file for ${fw}!!!"
    exit 0
  fi
  if [ "${ZFW_MAP["${fw}"]}" = "true" ]; then
    # we don't use compressed fw file, create empty one
    ${GCC} ${AFLAGS} ${AINCLUDES} \
      -c ${AMBOOT}/piggy/${PIGGY_MAP["${fw}"]} \
      -o ${OUT_ZFW}
    ${OBJCOPY} -j .text -O elf64-littleaarch64 ${OUT_ZFW} ${OUT_ZFW}
  fi
done

cp ${FW_DIR}/gpt_both.fw ${FW_DIR}/gpt.fw

echo -e "\nBuilding ${BUILD_TYPE} images..."
ARTEFACTS="$(find ${FW_DIR} -name "header_*.fw" -exec basename {} \; | awk -F '.' '{print $1}' | cut -c 8-)"
# for artefact in bst bld kernel lnx bst_bld bst_bld_kernel_sbp_sbs_lnx sbp sbs
for artefact in ${ARTEFACTS}
do
    echo "Building ${artefact} elf file"
    ${GCC} \
        -Wl,-T,${FW_DIR}/memfwprog/${artefact}.lds \
        -nostartfiles -march=armv8-a+crc+crypto -mgeneral-regs-only -nostdlib -Wl,--build-id=none \
        -o ${OUTPUR_DIR}/${artefact}_${BUILD_TYPE}.elf \
        ${FW_DIR}/header_${artefact}.fw \
        ${MEMFW_PAYLOAD} ${MEMFWPROG_OBJS}
    # strip resulting binary
    ${STRIP} --remove-section=.trash ${OUTPUR_DIR}/${artefact}_${BUILD_TYPE}.elf
done
