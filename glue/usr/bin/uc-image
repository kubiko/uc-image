#!/bin/bash

# This program is free software: you can redistribute it and/or modify it
# under the terms of the the GNU General Public License version 3, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranties of
# MERCHANTABILITY, SATISFACTORY QUALITY or FITNESS FOR A PARTICULAR
# PURPOSE.  See the applicable version of the GNU General Public
# License for more details.
#.
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright (C) 2024 Canonical, Ltd.

# this can be used to validate if there is newer version available
SCRIPT_VERSION=7.4.2

unset BUILDER_CONFIG
declare -A BUILDER_CONFIG

READLINK="readlink"
# use fakeroot by default
BUILDER_CONFIG["FAKEROOT"]="fakeroot"

YQ="${SNAP}/usr/bin/yq"

# fill in default values
BUILDER_CONFIG["DEBUG_LEVEL"]="${UC_IMAGE_DEBUG_LEVEL}"
BUILDER_CONFIG["VALIDATION"]="ignore"

# special files to be copied from gadget snap if any exists
# they are typically not mapped to any partition, so won't be picked based on
# gadget yaml
# uc.lst: uuu flash config file
# gpt_* : partition table files
# Qualcomm flash supporting files flashall, rawprogram*, patch*, prog_fire*
# dragonboard 410c: sbc_1.0_8016.bin
# Renesas: flash-uc.sh, Flash_Writer_*, fip- bl2_*
BUILDER_CONFIG["SPECIAL_GADGET_ASSETS"]="uc.lst gpt*.bin prog*_firehose*.* flashall rawprogram*.xml patch*.xml sbc_1.0_8016.bin u-boot-signed*.imx imx-boot.* bst_release.bin.signed reflash-system.sh flash-uc.sh Flash_Writer_* fip- bl2_*"

# delete all logs
rm -rf "$(dirname "$(mktemp -u -t uc-image-builder-XXXX)")"/uc-image-builder-* 2> /dev/null
BUILDER_CONFIG["TMP_LOG_FILE"]="$(mktemp -t uc-image-builder-XXXX)"
[ -z "${BUILDER_CONFIG["DEBUG_LEVEL"]}" ] && BUILDER_CONFIG["DEBUG_LEVEL"]=1

# boot assets candidate directories in gadget snap
BOOT_ASSETS_CANDIDATES="blobs boot-assets assets"

# print help
print_help () {
  echo "Builder for UbuntuCore for images supporting fastboot like flash tool"
  echo ""
  echo "positional arguments:"
  echo "  model_assertion          Path to the model assertion file. This argument must"
  echo "                           be given unless the state machine is being resumed, in"
  echo "                           which case it cannot be given."
  echo ""
  echo "optional arguments:"
  echo "  -h, --help               show this help message and exit"
  echo "  --snap SNAP              Install an extra snap."
  echo "                           This is passed through to 'snap prepare-image'. The snap argument can include"
  echo "                           additional information about the track|risk channel/branch"
  echo "                           with the following syntax: <snap>=<track|channel/branch>"
  echo "                           examples: --snap go=1.14|stable"
  echo "                                     --snap avahi.snap"
  echo "  --revisions              Specify a seeds.manifest file referencing the exact revisions"
  echo "                           of the provided snaps which should be installed"
  echo "                           seeds.manifest is auto generated as ubuntu-core-image.revisions"
  echo "  -c CHANNEL, --channel CHANNEL"
  echo "                           The snap channel to use, one of stable/candidate/beta/edge"
  echo "                           stable channel is assumed if no channel is defined"
  echo "                           example: -c edge"
  echo "  --preseed                Pressed the image."
  echo "  --preseed-sign-key       Name of the key to use to sign preseed assertion, otherwise use the default key"
  echo "  --validation             Control of the validation sets, choose 'ignore' or 'enforce', default: '${BUILDER_CONFIG["VALIDATION"]}'"
  echo "  --preseed-sysfs-overlay, Overlay of sysfs to be used when building presseded image."
  echo "         (--sysfs-overlay) This required when building images with specific hw interfaces"
  echo "  -d, --debug              print debug"
  echo "  -dd                      print verbose debugs"
  echo "  -v|--version"
  echo "                           print version of the script"
  echo ""
  echo "Common options:"
  echo "  --disk-info DISK-INFO-CONTENTS"
  echo "                           File to be used as .disk/info on the image's rootfs."
  echo "                           This file can contain useful information about the"
  echo "                           target image, like image identification data, system"
  echo "                           name, build timestamp etc."
  echo "  -O DIRECTORY, --output-dir DIRECTORY"
  echo "                           The directory in which to put generated disk image"
  echo "                           files."
  echo "  -w DIRECTORY, --workdir  DIRECTORY"
  echo "                           The working directory in which to download and unpack"
  echo "                           all the source/snap files for the image. This directory can"
  echo "                           exist or not, and it is not removed after this program"
  echo "                           exits. If not given, a temporary working directory is"
  echo "                           used instead under /tmp"
  echo " --build-raw               Build raw image, instead of sparse one"
  echo " --auto-import-assertion   ASSERTION FILE"
  echo "                           Auto import assertion file to be included in root of main writable partiton."
  echo "                           This assertion is imported once system is fully seeded"
  echo "                           Passed file does not need to have correct file name, it will be renamed"
  echo " --set-to-factory-reset    !!Experimental!!"
  echo "                           This option will set snapd_recovery_mode to \"factory-reset\""
  echo "                           System should perform factory-reset while, preserving ubuntu-save content."
  echo "                           This is experimental feature and it's not guranteed to work, especially"
  echo "                           disk layout had changed"
  echo "                           If \"ubuntu-seed-device-dir\" is not provide, ubuntu-seed partition won't be created."
  echo "                           Instead ubuntu-seed directory will be copied to the output directory."
  echo "--ubuntu-seed-device-dir   !!Experimental!!"
  echo "                           Requires set-to-factory-reset to be set!"
  echo "                           ubuntu-seed device directory to be included in the built seed image"
  echo "                           This option provides ability to build device specific image."
  echo "                           Created image is only usable on the device from which \"device\" directory"
  echo "                           was exported."
  echo ""
  echo "--build-tar-seed           Build seed image as tar ball(no compression needed)"
  echo "                           Use this option to update existing devices with ssh access"
  echo "                           This can be used with 'set-to-factory-reset' without need to provide"
  echo "                           'ubuntu-seed-device-dir' with sealed encryption keys'"
  echo ""
  echo "--build-dir-seed           Build seed image as directory"
  echo "                           Use this option to update existing devices with ssh access"
  echo "                           This can be used with 'set-to-factory-reset' without need to provide"
  echo "                           'ubuntu-seed-device-dir' with sealed encryption keys'"
  echo ""
  echo "--build-compresed-seed     Build compressed ubuntu-seed fs image."
  echo "                           Use this to option to build compressed, unsparsed ubuntu-seed partition image."
  echo "                           Such a image can be sed for flash device from running system with xzcat, e.g"
  echo "                             $ xzcat <ubuntu-seed.img.xz> | pv | sudo dd of=<target part> bs=256M;sync"
  echo ""
  echo "Builder supports default settings passed through environment variables"
  echo "Supported env variables:"
  echo "    UC_IMAGE_DEBUG_LEVEL:  Default log level"
  echo "                           0 - no logs, 3 - detailed logs. Default level is '1'"
}

# normalize version
normalize_version () {
   echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'
}

# check snaps interfaces are connected before progressing
check_snap_environment () {
  # are we even running in snap confinement
  if !  env | grep -q  "SNAP_INSTANCE_NAME"; then
    echo "Detected non snap environment execution (running unconfined)"
    return
  fi

  # check we are not running as root
  if [ "$USER" =  "root" ] && [ -z "${BUILDER_CONFIG["PRESEED"]}" ]; then
    echo "Please do not run with sudo, no need for this"
    exit 0
  fi

  # if we are preseeding, we need to run as root
  if [ "$USER" !=  "root" ] && [ -n "${BUILDER_CONFIG["PRESEED"]}" ]; then
    echo "Please run with sudo, preseeding requires mounting."
    exit 0
  fi

}

# print debug log
print_debug () {
  local level=${1}
  shift
  [ "${BUILDER_CONFIG["DEBUG_LEVEL"]}" -ge "${level}" ] && echo -e "$@"
  # if work dir does not exist yet, log to tmp log file
  if [ -e "${BUILDER_CONFIG["TMP_LOG_FILE"]}" ]; then
    echo -e -n "$@" >> "${BUILDER_CONFIG["TMP_LOG_FILE"]}"
  else
    echo -e -n "$@" >> "${BUILDER_CONFIG["WORK_DIR"]}/builder.log"
  fi
}

# print builder config if debug log
print_builder_config () {
  if [ "${BUILDER_CONFIG["DEBUG_LEVEL"]}" -ge "2" ]; then
    print_debug 1 "Builder configuration:"
    for i in "${!BUILDER_CONFIG[@]}"; do
      print_debug 1 "\t$i = ${BUILDER_CONFIG[$i]}"
    done
    # print empty line
    echo ""
  fi
}

# prepare work directory
prepare_work_directory () {
  # first clean previus tmp directories
  rm -rf "$(dirname "$(mktemp -u -d -t uc-i-workdir-XXXXX)")"/uc-i-workdir-*
  # if work directory is not defined, use tmp one
  if [ -z "${BUILDER_CONFIG["WORK_DIR"]}" ]; then
    # work dir not defined create tmp one
    BUILDER_CONFIG["WORK_DIR"]=$(mktemp -d -t uc-i-workdir-XXXX)
    mkdir -p "${BUILDER_CONFIG["WORK_DIR"]}"
    print_debug 2 "Creating temp work directory: ${BUILDER_CONFIG["WORK_DIR"]}"
  else
    # make sure dir exists
    if [ -d "${BUILDER_CONFIG["WORK_DIR"]}" ]; then
        print_debug 2 "Cleaning old build directory [${BUILDER_CONFIG["WORK_DIR"]}]"
        rm -rf "${BUILDER_CONFIG["WORK_DIR"]}"
    fi
    mkdir -p "${BUILDER_CONFIG["WORK_DIR"]}"
  fi
}

# parse model assertion
parse_model_asseertion() {
  print_debug 3 "parse_model_asseertion"
  # determine Ubuntu Core version based on the base snap

  # we can have true uc20 and we can have uc20 with disk and boot as uc16/18
  # grade keyword is only defined for tru uc20
  BUILDER_CONFIG["UC_VERSION"]="$(sed -n 's/^base: core\(.*\)/\1/p' "${BUILDER_CONFIG["MODEL_ASSERTION"]}")"
  if [ "${BUILDER_CONFIG["UC_VERSION"]}" -lt "20" ]; then
    print_debug 1 "\nUbuntu Core 16/18 image builds are no more supported by this tool."
    exit
  fi
  print_debug 2 "Determined Ubuntu Core version: ${BUILDER_CONFIG["UC_VERSION"]}"
  BUILDER_CONFIG["MODEL"]="$(sed -n 's/^model: \(.*\)/\1/p' "${BUILDER_CONFIG["MODEL_ASSERTION"]}")"
  print_debug 2 "Determined model name: ${BUILDER_CONFIG["MODEL"]}"
}

# determine bootloader type
determine_bootloader () {
  print_debug 3 "determine_bootloader"
  # determine boot assets dir
  for ba in ${BOOT_ASSETS_CANDIDATES}
  do
    if [ -d "${BUILDER_CONFIG["GADGET_DIR"]}/${ba}" ]; then
      BUILDER_CONFIG["BOOT_ASSETS"]="${BUILDER_CONFIG["GADGET_DIR"]}/${ba}"
      break
    fi
  done

  print_debug 5 "bootloader: ${YQ} eval '.volumes.[] | select(.bootloader) | .bootloader' ${BUILDER_CONFIG["GADGET_YAML"]}"
  BUILDER_CONFIG["BOOTLOADER"]="$("${YQ}" eval '.volumes.[] | select(.bootloader) | .bootloader' "${BUILDER_CONFIG["GADGET_YAML"]}")"
  print_debug 5 "BUILDER_CONFIG[\"BOOTLOADER\"]=${BUILDER_CONFIG["BOOTLOADER"]}"
  BUILDER_CONFIG["IMAGE_ROOT"]=${BUILDER_CONFIG["WORK_DIR"]}/system-seed

  print_debug 3 "BUILDER_CONFIG[\"IMAGE_ROOT\"]=${BUILDER_CONFIG["IMAGE_ROOT"]}"
  # we can have u-boot, lk, or special case of lk amboot(Ambarella amboot)
  if [ "${BUILDER_CONFIG["BOOTLOADER"]}" = "u-boot" ]; then
    ## u-boot
    BUILDER_CONFIG["BOOTLOADER"]="u-boot"
    # check if we have defined dtb
    BUILDER_CONFIG["DTB"]=$("${YQ}" eval '. | select(.device-tree) | .device-tree' "${BUILDER_CONFIG["GADGET_YAML"]}")
  elif [ "${BUILDER_CONFIG["BOOTLOADER"]}" = "lk" ]; then
    ## lk
    BUILDER_CONFIG["BOOTLOADER"]="lk"
    mv "${BUILDER_CONFIG["IMAGE_ROOT"]}/boot/lk" "${BUILDER_CONFIG["WORK_DIR"]}/lk"
    # check if this is amboot special case
    if [ -d "${BUILDER_CONFIG["BOOT_ASSETS"]}/amboot" ]; then
      # set some configuratoon for amboot case
      BUILDER_CONFIG["BUILD_RAW"]="true"
      BUILDER_CONFIG["AMBOOT"]="true"
    fi
  else
    print_debug 0 "Unrecognised bootloader, exiting"
    exit 0
  fi

  print_debug 1 "\nDetected bootloader: ${BUILDER_CONFIG["BOOTLOADER"]}"
}

# validate passed parameter is file
# if passed string is not file with relative/absolute path
# first hit is used
# function returns absolute path to the file if file is validated or none
validate_file () {
  local file=${1}
  if [ -n "${file}" ]; then
    if [ -e "${file}" ]; then
      "${READLINK}" -f "${file}"
    fi
  fi
}

# validate passed snap
# passed snap can be either snap name from store or local file
# function return either snap name or absolute path to snap file
validate_snap () {
  local s="${1}"
  if [ "${s: -5}" = ".snap" ]; then
    # check if local snap file exists
    validate_file "${s}"
  else
    # store snap
    echo "${s}"
  fi
}

# normalise passed size to kilo bytes
# passed size can be in Kilo(K|k), Mega(M|m), Giga(G\g) bytes
# if not specified value is assumed in bytes
normalise_size_to_kb () {
  local size=${1}
  case $size in
    (0)  size="0" ;;
    (*G | *g) size=$(("$(echo "${size}" | sed -e 's/G//g' -e 's/g//g')" * 1024 * 1024)) ;;
    (*M | *m) size=$(("$(echo "${size}" | sed -e 's/M//g' -e 's/m//g')" * 1024)) ;;
    (*K | *k) size=$(echo "${size}" | sed -e 's/K//g' -e 's/k//g') ;;
    (*) size=$(("${size}" / 1024)) ;;
  esac
  echo "${size}"
}

# seed passed assertion as auto import assertion
# one assertion can be passed
# if no assertion is passed do nothing
seed_auto_import_assertion () {
  print_debug 5 "seed_auto_import_assertion(${BUILDER_CONFIG["ASSERTION_IMPORT"]})"
  if [ -n "${BUILDER_CONFIG["ASSERTION_IMPORT"]}" ]; then
    print_debug 1 "\nImporting passed assertion file: [${BUILDER_CONFIG["ASSERTION_IMPORT"]}]"
    local system
    system=$(realpath "${BUILDER_CONFIG["IMAGE_ROOT"]}"/systems/*)
    cp "${BUILDER_CONFIG["ASSERTION_IMPORT"]}" "${system}/auto-import.assert"
  fi
}

# update snapd recovery mode if required
update_snapd_recovery_mode () {
  if [ -n "${BUILDER_CONFIG["SNAPD_RECOVERY_MODE"]}" ]; then
    print_debug 1 "\n !! updating snapd recovery mode to: ${BUILDER_CONFIG["SNAPD_RECOVERY_MODE"]}"
    # depending on bootloader we need to use appropriate tools
    if [ "${BUILDER_CONFIG["BOOTLOADER"]}" == "u-boot" ]; then
      # prepare config file point to target
      local fw_config="/tmp/fw_env-seed.config"
      echo "${BUILDER_CONFIG["IMAGE_ROOT"]}/uboot/ubuntu/boot.sel 0x0000 0x1000" > ${fw_config}
      echo "${BUILDER_CONFIG["IMAGE_ROOT"]}/uboot/ubuntu/boot.sel 0x0000 0x1000" >> ${fw_config}
      print_debug 4 "u-boot bootloader: fw_setenv --config \"${fw_config}\" \"snapd_recovery_mode\" \"${BUILDER_CONFIG["SNAPD_RECOVERY_MODE"]}\""
      fw_setenv --config "${fw_config}" "snapd_recovery_mode" "${BUILDER_CONFIG["SNAPD_RECOVERY_MODE"]}"
    elif [ "${BUILDER_CONFIG["BOOTLOADER"]}" == "lk" ]; then
      print_debug 4 "lk bootloader: lk-boot-env -u ${BUILDER_CONFIG["WORK_DIR"]}/lk/snaprecoverysel.bin --revovery-mode \"${BUILDER_CONFIG["SNAPD_RECOVERY_MODE"]}\""
      lk-boot-env -u "${BUILDER_CONFIG["WORK_DIR"]}/lk/snaprecoverysel.bin" --revovery-mode "${BUILDER_CONFIG["SNAPD_RECOVERY_MODE"]}"
    else
      print_debug 1 "\n !! Unsupported bootloader to set snapd_recovery_mode"
      exit 1
    fi
  fi
  if [ -n "${BUILDER_CONFIG["UBUNTU_SEED_DEVICE"]}" ]; then
    print_debug 1 "\n\tSeeding device encryption context to the image"
    print_debug 1 "\n\t!! This image will only work on the device from which encryption context was fetched !!"
    cp -r "${BUILDER_CONFIG["UBUNTU_SEED_DEVICE"]}" "${BUILDER_CONFIG["IMAGE_ROOT"]}/device"
  fi
}

# add build timestamp if provided
# if no buildstamp is passed do nothing
disk_info_contents () {
  print_debug 5 "disk_info_contents(${BUILDER_CONFIG["DISK_INFO_CONTENTS"]})"
  if [ -n "${BUILDER_CONFIG["DISK_INFO_CONTENTS"]}" ]; then
    print_debug 1 "\nUsing passed disk info contents: [${BUILDER_CONFIG["DISK_INFO_CONTENTS"]}]"
    mkdir -p "${BUILDER_CONFIG["IMAGE_ROOT"]}/.disk"
    cp "${BUILDER_CONFIG["DISK_INFO_CONTENTS"]}" "${BUILDER_CONFIG["IMAGE_ROOT"]}/.disk/info"
  fi
}

# create image for the volume
# based on config, this can be ext4 file system image, or tarball
# passed parameters (not all are used, depending on created volume image)
# - volume source
# - target volume image, without file type, it will be added
# - fstype
# - volume label
# - volume size
create_disk_image() {
  local volume_source="${1}"
  local volume_image="${2}"
  local fs_type="${3}"
  local volume_label="${4}"
  local volume_size="${5}"
  local target_image="${volume_image}.img"
  # build ext4 disk image
  if [ "${BUILDER_CONFIG["BUILD_TAR_SEED"]}" = "true" ]; then
    print_debug 1 "\nCreating tarball for ${volume_label}"
    print_debug 2 "tar -cf ${volume_image}.tar ${volume_source}"
    ${BUILDER_CONFIG["FAKEROOT"]} tar -cf "${volume_image}.tar" "${volume_source}"
    # update target file name
    target_image="${volume_image}.tar"
  elif [ "${BUILDER_CONFIG["BUILD_DIR_SEED"]}" = "true" ] && [ "${volume_image}" = "ubuntu-seed" ]; then
    print_debug 1 "\nSkipping file system image step for ${volume_label}, as it's not required by the build type."
    target_image="${volume_source}"
  else
    print_debug 2 "${BUILDER_CONFIG["FAKEROOT"]} mke2fs -O -metadata_csum -T default -E root_owner=0:0 -O uninit_bg -t ${fs_type} -L ${volume_label} -d ${volume_source} ${volume_image}.raw ${volume_size}"
    ${BUILDER_CONFIG["FAKEROOT"]} mke2fs \
      -O \
      -metadata_csum \
      -T default \
      -E root_owner=0:0 \
      -O uninit_bg \
      -t "${fs_type}" \
      -L "${volume_label}" \
      -d "${volume_source}" "${volume_image}.raw" \
      "${volume_size}" 2>&1 | tee -a "${BUILDER_CONFIG["WORK_DIR"]}/builder.log"
    if [ ! -f "${volume_image}.raw" ]; then
      print_debug 1 "\nVolume creation for ${volume_label} partiton failed, bailing out!!!"
      exit 0
    fi
    # post-process image if required
    if [ "${BUILDER_CONFIG["BUILD_COMPRESSED_SEED"]}" = "true" ]; then
      print_debug 1 "\nCompressing image for ${volume_label}"
      print_debug 2 "xz -c ${volume_image}.raw  > ${volume_image}.img.xz"
      xz -c "${volume_image}.raw"  > "${volume_image}.img.xz"
      # update target file name
      target_image="${volume_image}.img.xz"
    elif [ "${BUILDER_CONFIG["AMBOOT"]}" = "true" ]; then
      print_debug 1 "\nSkipping sparse image step for ${volume_label}, as it's not required by the build type."
      target_image="${volume_image}.raw"
    else
      print_debug 1 "\nCreate sparse image for ${volume_label}"
      print_debug 2 "img2simg ${volume_image}.raw ${volume_image}.img"
      img2simg \
        "${volume_image}.raw" \
        "${volume_image}.img" 2>&1 | tee -a "${BUILDER_CONFIG["WORK_DIR"]}/builder.log"
    fi
  fi
  if [ ! -f "${target_image}" ]; then
    print_debug 1 "\nImage creation for ${volume_label} partiton failed, bailing out!!!"
    exit 0
  fi

}

# create seed partition image
create_ubuntu_seed_partition_image () {
  print_debug 1 "\nCreating ubuntu-seed partition image"

  # calculate ubuntu-seed part size
  local seed_size_human
  seed_size_human=$("${YQ}" eval '.volumes.[].structure.[] | select(.name == "ubuntu-seed") | .size' "${BUILDER_CONFIG["GADGET_YAML"]}")
  local SEED_SIZE
  SEED_SIZE="$(normalise_size_to_kb "${seed_size_human}")k"
  local fs_type
  fs_type=$("${YQ}" eval '.volumes.[].structure.[] | select(.name == "ubuntu-seed") | .filesystem' "${BUILDER_CONFIG["GADGET_YAML"]}")
  create_disk_image \
      "${BUILDER_CONFIG["IMAGE_ROOT"]}" \
      "${BUILDER_CONFIG["WORK_DIR"]}/ubuntu-seed" \
      "${fs_type}" \
      "ubuntu-seed" \
      "${SEED_SIZE}"
}

create_non_ubuntu_partions_images () {
  print_debug 1 "\nCreating non Ubuntu partitions images"
  local partitions
  local size
  local fs_type
  local converted_size
  rm -rf "${BUILDER_CONFIG["WORK_DIR"]}/partitions"
  partitions=$("${YQ}" eval '.volumes.[].structure.[] | select((.filesystem == "*") and (.name != "ubuntu-*")) | .name' "${BUILDER_CONFIG["GADGET_YAML"]}")
  for p_name in ${partitions}
  do
    print_debug 2 "\nCreating part image for partition: ${p_name}"
    size=$(name=${p_name} "${YQ}" eval '.volumes.[].structure.[] | select(.name == strenv(name)) | .size' "${BUILDER_CONFIG["GADGET_YAML"]}")
    fs_type=$(name=${p_name} "${YQ}" eval '.volumes.[].structure.[] | select(.name == strenv(name)) | .filesystem' "${BUILDER_CONFIG["GADGET_YAML"]}")
    converted_size="$(normalise_size_to_kb "${size}")k"
    mkdir -p "${BUILDER_CONFIG["WORK_DIR"]}/partitions/${p_name}"
    # TODO: support preseeded content from gadget snap
    create_disk_image \
      "${BUILDER_CONFIG["WORK_DIR"]}/partitions/${p_name}" \
      "${BUILDER_CONFIG["WORK_DIR"]}/partitions/${p_name}" \
      "${fs_type}" \
      "${p_name}" \
      "${converted_size}"
  done
}

copy_release_files () {
  # copy created disk images to the output directory
  for rf in writable seed ubuntu-seed
  do
    if [ -e "${BUILDER_CONFIG["WORK_DIR"]}/${rf}.img" ]; then
      mv "${BUILDER_CONFIG["WORK_DIR"]}/${rf}.img" \
         "${BUILDER_CONFIG["OUTPUT_DIR"]}"/
    # check for .imx.xz
    elif [ -e "${BUILDER_CONFIG["WORK_DIR"]}/${rf}.img.xz" ]; then
      mv "${BUILDER_CONFIG["WORK_DIR"]}/${rf}.img.xz" \
         "${BUILDER_CONFIG["OUTPUT_DIR"]}"
    # check also for .tar
    elif  [ -e "${BUILDER_CONFIG["WORK_DIR"]}/${rf}.tar" ]; then
      mv "${BUILDER_CONFIG["WORK_DIR"]}/${rf}.tar" \
         "${BUILDER_CONFIG["OUTPUT_DIR"]}"
    fi
  done

  # if building factory-reset image without encryption context, use ubuntu-seed dir
  if [ "${BUILDER_CONFIG["BUILD_DIR_SEED"]}" = "true" ]; then
    print_debug 2 "\nUsing image-root dir as output"
    mv "${BUILDER_CONFIG["IMAGE_ROOT"]}" \
       "${BUILDER_CONFIG["OUTPUT_DIR"]}/ubuntu-seed"
    BUILDER_CONFIG["IMAGE_ROOT"]="${BUILDER_CONFIG["OUTPUT_DIR"]}/ubuntu-seed"
  fi

  # copy gadget boot assets files if making normal release
  for f in $("${YQ}" eval '.volumes.[].structure.[] | .content.[].image' "${BUILDER_CONFIG["GADGET_YAML"]}" | uniq)
  do
    if [ -e "${BUILDER_CONFIG["GADGET_DIR"]}/${f}" ]; then
      cp "${BUILDER_CONFIG["GADGET_DIR"]}/${f}" \
         "${BUILDER_CONFIG["OUTPUT_DIR"]}"
    fi
  done

  # copy over special files e.g. gpt_*, uc.lst. Assume use of wild cards
  for sf in ${BUILDER_CONFIG["SPECIAL_GADGET_ASSETS"]}
  do
    # shellcheck disable=SC2086 # SC2086 is irrelevant, 'sf' can contain wild cards
    if compgen -G "${BUILDER_CONFIG["BOOT_ASSETS"]}"/${sf} > /dev/null; then
      # shellcheck disable=SC2086 # SC2086 is irrelevant, 'sf' can contain wild cards
      cp --dereference -r \
        "${BUILDER_CONFIG["BOOT_ASSETS"]}"/${sf} \
        "${BUILDER_CONFIG["OUTPUT_DIR"]}"
    fi
  done

  # if booloader is lk, copy over boot image
  if [ "${BUILDER_CONFIG["BOOTLOADER"]}" = "lk" ]; then
    cp "${BUILDER_CONFIG["WORK_DIR"]}"/lk/* \
       "${BUILDER_CONFIG["OUTPUT_DIR"]}"
  fi

  # copy(move) additional partition images if any
  if ls "${BUILDER_CONFIG["WORK_DIR"]}/partitions/"*.img 1> /dev/null 2>&1; then
    mv "${BUILDER_CONFIG["WORK_DIR"]}/partitions/"*.img \
       "${BUILDER_CONFIG["OUTPUT_DIR"]}"
  fi
  if ls "${BUILDER_CONFIG["WORK_DIR"]}/partitions/"*.tar 1> /dev/null 2>&1; then
    mv "${BUILDER_CONFIG["WORK_DIR"]}/partitions/"*.tar \
       "${BUILDER_CONFIG["OUTPUT_DIR"]}"
  fi
}

run_amba_image_build () {
  # gather files for amba image build first
  cp -r "${BUILDER_CONFIG["BOOT_ASSETS"]}/amboot" \
        "${BUILDER_CONFIG["WORK_DIR"]}/amba-build"
  mkdir -p "${BUILDER_CONFIG["WORK_DIR"]}/amba-build/images"
  # copy images from gadget assets, ignore dir warning
  cp "${BUILDER_CONFIG["BOOT_ASSETS"]}"/* \
     "${BUILDER_CONFIG["WORK_DIR"]}/amba-build/images" 2>/dev/null

  [ -e "${BUILDER_CONFIG["WORK_DIR"]}/writable.raw" ] \
    && mv "${BUILDER_CONFIG["WORK_DIR"]}/writable.raw" \
          "${BUILDER_CONFIG["WORK_DIR"]}/amba-build/images/lnx.bin"
  [ -e "${BUILDER_CONFIG["WORK_DIR"]}/seed.raw" ] \
    && mv "${BUILDER_CONFIG["WORK_DIR"]}/seed.raw" \
          "${BUILDER_CONFIG["WORK_DIR"]}/amba-build/images/lnx.bin"

  [ -e "${BUILDER_CONFIG["WORK_DIR"]}/ubuntu-seed.raw" ] \
    && mv "${BUILDER_CONFIG["WORK_DIR"]}/ubuntu-seed.raw" \
          "${BUILDER_CONFIG["WORK_DIR"]}/amba-build/images/ubuntu-seed.img"

  # add gpt image and rename it
  [ -e "${BUILDER_CONFIG["BOOT_ASSETS"]}/gpt_both0.bin" ] \
    && cp "${BUILDER_CONFIG["BOOT_ASSETS"]}/gpt_both0.bin" \
          "${BUILDER_CONFIG["WORK_DIR"]}/amba-build/images/gpt_both.bin"

  if [ "${BUILDER_CONFIG["BOOTLOADER"]}" = "lk" ]; then
    cp "${BUILDER_CONFIG["WORK_DIR"]}"/lk/* \
       "${BUILDER_CONFIG["WORK_DIR"]}/amba-build/images"
  fi

  # run amba image builder script, we need to run it in dir
  # as it has some hardcoded paths
  pushd "${BUILDER_CONFIG["WORK_DIR"]}/amba-build" || exit
  # we have two types of amba firmware, legacy and flexible
  # determine which one we are building based on
  if [ -e .uc-image-config ]; then
    print_debug 2 "build-amba-images ${BUILDER_CONFIG["WORK_DIR"]}/amba-build ${BUILDER_CONFIG["WORK_DIR"]}/amba-build/images ${BUILDER_CONFIG["OUTPUT_DIR"]}"
    build-amba-images \
      "${BUILDER_CONFIG["WORK_DIR"]}/amba-build" \
      "${BUILDER_CONFIG["WORK_DIR"]}/amba-build/images" \
      "${BUILDER_CONFIG["OUTPUT_DIR"]}"
  elif [ -e .uc-image-flexible-config ]; then
    print_debug 2 "build-amba-images-flexible ${BUILDER_CONFIG["WORK_DIR"]}/amba-build ${BUILDER_CONFIG["WORK_DIR"]}/amba-build/images ${BUILDER_CONFIG["OUTPUT_DIR"]}"
    build-amba-images-flexible \
      "${BUILDER_CONFIG["WORK_DIR"]}/amba-build" \
      "${BUILDER_CONFIG["WORK_DIR"]}/amba-build/images" \
      "${BUILDER_CONFIG["OUTPUT_DIR"]}"
  else
    print_debug 1 "\nMissing amba uc-image config!!"
    exit 1
  fi
  popd || exit
}

# generate image manifest
generate_manifest () {
  local image_manifest="${BUILDER_CONFIG["OUTPUT_DIR"]}/ubuntu-core-image.manifest"
  {
    echo -e "### Ubuntu Core image build ###"
    echo -e "$(date)"
    echo -e "uc-image ${BUILDER_CONFIG["ARGS"]}"
    echo -e "\n### uc-image revision ####\n  revision: ${SNAP_REVISION}\tversion: ${SCRIPT_VERSION}"
    echo -e "\n### Snap options ###"
  } >> "${image_manifest}"

  if ls "${BUILDER_CONFIG["IMAGE_ROOT"]}"/systems/*/options.yaml 1> /dev/null 2>&1; then
      cat "${BUILDER_CONFIG["IMAGE_ROOT"]}"/systems/*/options.yaml >> "${image_manifest}"
  fi


  {
    echo -e "\n### Snap revissions ###" >> "${image_manifest}"
    grep -A7 "type: snap-revision" "${BUILDER_CONFIG["IMAGE_ROOT"]}"/systems/*/assertions/snaps
    echo -e "\n### Model assertion ###" >> "${image_manifest}"
    cat "${BUILDER_CONFIG["IMAGE_ROOT"]}"/systems/*/model
    echo -e "\n### snap checksums ###"
  } >> "${image_manifest}"

  if ls "${BUILDER_CONFIG["IMAGE_ROOT"]}"/systems/*/snaps/*.snap 1> /dev/null 2>&1; then
    sha256sum "${BUILDER_CONFIG["IMAGE_ROOT"]}"/systems/*/snaps/*.snap \
      | awk -F" |/" '{print $1, $NF}' >> "${image_manifest}"
  fi

  if ls "${BUILDER_CONFIG["IMAGE_ROOT"]}"/snaps/*.snap 1> /dev/null 2>&1; then
    sha256sum "${BUILDER_CONFIG["IMAGE_ROOT"]}"/snaps/*.snap \
      | awk -F" |/" '{print $1, $NF}' >> "${image_manifest}"
  fi
}

run_snap_prepare_image() {
  # set default exit code as fail before running snap prepare-image
  echo 2 > "${BUILDER_CONFIG["WORK_DIR"]}.snap_prepare_result"
  eval "${*}"
  retValue=$?
  echo ${retValue} > "${BUILDER_CONFIG["WORK_DIR"]}.snap_prepare_result"
}

# store invoked command
BUILDER_CONFIG["ARGS"]="${*}"
# parse passed parameters
while [ "$1" != "" ]; do
  case $1 in
    -c | --channel)
      BUILDER_CONFIG["CHANNEL"]="--channel ${2}"
      shift
      ;;
    --snap=*)
      EX_SNAP=$(echo "${1}" | awk -F= '{print $2}')
      BUILDER_CONFIG["SNAPS"]="${BUILDER_CONFIG["SNAPS"]} --snap=$(validate_snap "${EX_SNAP}")"
      ;;
    --snap)
      BUILDER_CONFIG["SNAPS"]="${BUILDER_CONFIG["SNAPS"]} --snap=$(validate_snap "${2}")"
      shift
      ;;
    --revisions)
      f=$(validate_file "${2}")
      if [ -n "${f}" ]; then
        BUILDER_CONFIG["REVISIONS"]="--revisions=${f}"
      else
        print_debug 0 "wrong 'revisions' file was passed [ ${2} ]"
        exit
      fi
      shift
      ;;
    --preseed)
      BUILDER_CONFIG["PRESEED"]="--preseed"
      ;;
    --preseed-sign-key)
      BUILDER_CONFIG["PRESEED-KEY"]="--preseed-sign-key ${2}"
      shift
      ;;
    --preseed-sysfs-overlay | --sysfs-overlay)
      BUILDER_CONFIG["PRESEED-SYSFS-OVERLAY"]="--sysfs-overlay ${2}"
      shift
      ;;
    --validation)
      BUILDER_CONFIG["VALIDATION"]="${2}"
      shift
    ;;
    -O | --output-dir)
      BUILDER_CONFIG["OUTPUT_DIR"]="$(${READLINK} -f "${2}")"
      if [ -z "${BUILDER_CONFIG["OUTPUT_DIR"]}" ]; then
        print_debug 0 "Passed output directory cannot be created!!"
        exit
      fi
      shift
      ;;
    -w | --workdir)
      BUILDER_CONFIG["WORK_DIR"]="$(${READLINK} -f "${2}")"
      shift
      ;;
    --auto-import-assertion)
      f=$(validate_file "${2}")
      if [ -n "${f}" ]; then
        BUILDER_CONFIG["ASSERTION_IMPORT"]="${f}"
      else
        print_debug 0 "wrong assertion file to import was passed [ ${2} ]"
        exit
      fi
      shift
      ;;
    --disk-info)
      f=$(validate_file "${2}")
      if [ -n "${f}" ]; then
        BUILDER_CONFIG["DISK_INFO_CONTENTS"]="${f}"
      else
        print_debug 0 "wrong disk info file was passed [ ${2} ]"
        exit
      fi
      shift
      ;;
    --set-to-factory-reset)
      BUILDER_CONFIG["SNAPD_RECOVERY_MODE"]="factory-reset"
      ;;
    --ubuntu-seed-device-dir)
      if [ -n "${2}" ]; then
        BUILDER_CONFIG["UBUNTU_SEED_DEVICE"]="${2}"
      else
        print_debug 0 "Missing ubuntu-seed-device-dir parameter"
      fi
      shift
      ;;
    --help | -h)
      print_help
      exit
      ;;
    --build-raw)
      BUILDER_CONFIG["BUILD_RAW"]="true"
      ;;
    --build-compresed-seed)
      BUILDER_CONFIG["BUILD_COMPRESSED_SEED"]="true"
      ;;
    --build-tar-seed)
      BUILDER_CONFIG["BUILD_TAR_SEED"]="true"
      ;;
    --build-dir-seed)
      BUILDER_CONFIG["BUILD_DIR_SEED"]="true"
      ;;
    -d | --debug)
      BUILDER_CONFIG["DEBUG_LEVEL"]=3
      ;;
    -dd)
      BUILDER_CONFIG["DEBUG_LEVEL"]=5
      ;;
    -v | --version)
      echo -e "version: ${SCRIPT_VERSION}"
      exit 0
      ;;
    *)
      # check if this is model assertion
      ma=$(validate_file "${1}")
      if [ -n "${ma}" ]; then
        BUILDER_CONFIG["MODEL_ASSERTION"]=${ma}
      else
        print_debug 0 "Unknown parameter '$1'"
        print_help
        exit
      fi
      ;;
  esac
  shift
done

if [ -n "${BUILDER_CONFIG["UBUNTU_SEED_DEVICE"]}" ] && [ -z "${BUILDER_CONFIG["SNAPD_RECOVERY_MODE"]}" ]; then
  echo -e "\nMissing \"--set-to-factory-reset\" while using \"--ubuntu-seed-device-dir\""
  exit
fi

# if we are building factory-reset image without ubuntu-seed-device overlay, default to directory build
if [ -n "${BUILDER_CONFIG["SNAPD_RECOVERY_MODE"]}" ] && [ -z "${BUILDER_CONFIG["UBUNTU_SEED_DEVICE"]}" ] \
   && [ "${BUILDER_CONFIG["BUILD_TAR_SEED"]}" != "true" ]; then
  BUILDER_CONFIG["BUILD_DIR_SEED"]="true"
fi

# if we are trying to preseed, this cannot be realistically run in strict confinement
if [ -n "${BUILDER_CONFIG["PRESEED"]}" ]; then
  # we run as real root
  BUILDER_CONFIG["FAKEROOT"]=""
fi

if [ -z "${BUILDER_CONFIG["MODEL_ASSERTION"]}" ]; then
  print_debug 0 "model_assertion is not set"
  exit
fi

parse_model_asseertion
[ -z "${BUILDER_CONFIG["OUTPUT_DIR"]}" ] && BUILDER_CONFIG["OUTPUT_DIR"]=$(${READLINK} -f "uc-i-${BUILDER_CONFIG["MODEL"]}")

# check we have all the permissions
check_snap_environment

# first create or clean work directory
prepare_work_directory

print_builder_config

# always export snap revision manifest
BUILDER_CONFIG["REVISIONS"]="${BUILDER_CONFIG["REVISIONS"]} --write-revisions=${BUILDER_CONFIG["WORK_DIR"]}/ubuntu-core-image.revisions"

# run snap prepare image with all known parameters
image_build_command="snap prepare-image ${BUILDER_CONFIG["CHANNEL"]} --validation=${BUILDER_CONFIG["VALIDATION"]} ${BUILDER_CONFIG["REVISIONS"]} ${BUILDER_CONFIG["PRESEED"]} ${BUILDER_CONFIG["PRESEED-KEY"]} ${BUILDER_CONFIG["PRESEED-SYSFS-OVERLAY"]} ${BUILDER_CONFIG["SNAPS"]} ${BUILDER_CONFIG["MODEL_ASSERTION"]} ${BUILDER_CONFIG["WORK_DIR"]}"
print_debug 1 "Running: ${image_build_command}"
run_snap_prepare_image "${image_build_command}" 2>&1 | tee -a "${BUILDER_CONFIG["TMP_LOG_FILE"]}"
retVal=$(cat "${BUILDER_CONFIG["WORK_DIR"]}.snap_prepare_result")
rm -rf "${BUILDER_CONFIG["WORK_DIR"]}.snap_prepare_result"
if [ "${retVal}" -ne 0 ]; then
  print_debug 0 "snap prepare-image failed with (${retVal}), bailing out"
  exit
fi

print_debug 2 "snap prepare-image completed with exit code (${retVal})"

BUILDER_CONFIG["GADGET_DIR"]="${BUILDER_CONFIG["WORK_DIR"]}/gadget"
BUILDER_CONFIG["GADGET_YAML"]="${BUILDER_CONFIG["GADGET_DIR"]}/meta/gadget.yaml"

# merge logs
mv "${BUILDER_CONFIG["TMP_LOG_FILE"]}" "${BUILDER_CONFIG["WORK_DIR"]}/builder.log"
# determine bootloader
determine_bootloader

# updated seeded image per passed configurations
# add build timestamp if provided
disk_info_contents

# seed auto import assertion if provided
seed_auto_import_assertion

# mark image as recovery if required
update_snapd_recovery_mode

# prepare output directory
if [ -d "${BUILDER_CONFIG["OUTPUT_DIR"]}" ]; then
    print_debug 2 "Cleaning output directory [${BUILDER_CONFIG["OUTPUT_DIR"]}]"
    rm -rf "${BUILDER_CONFIG["OUTPUT_DIR"]}"
fi

mkdir -p "${BUILDER_CONFIG["OUTPUT_DIR"]}"

# create ubuntu-seed image
# do not create ubuntu-seed image if we are building directory mode
if [ "${BUILDER_CONFIG["BUILD_DIR_SEED"]}" != "true" ]; then
  create_ubuntu_seed_partition_image
fi

# create images for non-ubuntu partitions if needed
create_non_ubuntu_partions_images

# copy release files to output directory or run amba image build
# if we are building system-seed image, do not run amba_image_build
# do not build amba image if building factory-reset image without encryption context
if [ "${BUILDER_CONFIG["AMBOOT"]}" = "true" ] && \
   [ "${BUILDER_CONFIG["BUILD_COMPRESSED_SEED"]}" != "true" ] && \
   [ "${BUILDER_CONFIG["BUILD_TAR_SEED"]}" != "true" ] && \
   [ "${BUILDER_CONFIG["BUILD_DIR_SEED"]}" != "true" ]; then
  run_amba_image_build
else
  copy_release_files
fi

# create/copy image manifest
generate_manifest
if [ -e "${BUILDER_CONFIG["WORK_DIR"]}/ubuntu-core-image.revisions" ]; then
  cp "${BUILDER_CONFIG["WORK_DIR"]}/ubuntu-core-image.revisions" "${BUILDER_CONFIG["OUTPUT_DIR"]}"
fi

print_debug 0 "\nOutput available in: '${BUILDER_CONFIG["OUTPUT_DIR"]}'"
