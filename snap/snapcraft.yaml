name: uc-image
summary: Custom ubuntu core image buider
description: |
 Toolset to build emmc ubuntu core images for various boards, supporting custom flash tools.
 Created images can be used with tools like fastboot, uuu(mfgtools)

confinement: strict
grade: stable
adopt-info: glue
base: core24

platforms:
  arm64:
  amd64:

environment:
    PATH:            $SNAP/usr/sbin:$SNAP/usr/bin:$SNAP/sbin:$SNAP/bin:$SNAP/${CRAFT_ARCH_TRIPLET_BUILD_FOR}/bin:$SNAP/aarch64-linux-gnu/bin:$PATH
    LD_LIBRARY_PATH: $SNAP_LIBRARY_PATH:$LD_LIBRARY_PATH:$SNAP/lib:$SNAP/usr/lib:$SNAP/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}:$SNAP/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}:$SNAP/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}/android
    LANG:            C
    PYTHONPATH:      $SNAP/usr/lib/python3/dist-packages

layout:
  /etc/mke2fs.conf:
    bind-file: $SNAP/etc/mke2fs.conf
  /etc/mtools.conf:
    bind-file: $SNAP/etc/mtools.conf

apps:
    uc-image:
        command: usr/bin/uc-image
        plugs:
            - home
            - mount-observe
            - network-observe
            - removable-media
            - ssh-public-keys

parts:
  tools:
    plugin: nil
    stage-packages:
      - e2fsprogs
      - libfdisk1
      - libuuid1
      - libblkid1
      - libcom-err2
      - libubootenv-tool
      - libudev1
      - zlib1g
      - liblzma5
      - e2fslibs
      - android-sdk-libsparse-utils
      - android-libsparse
      - mtools
      - squashfs-tools
      - dosfstools
      - gdisk
      - fakeroot
      - openssh-client
      - ssh-import-id
      - ca-certificates
      - wget
      - xdelta3
      - xz-utils
    override-build: |
      sed -i \
          -e 's|/usr/lib/|${SNAP}/usr/lib/|g' \
          -e 's|FAKEROOT_PREFIX=|FAKEROOT_PREFIX=${SNAP}|g' \
          -e 's|FAKEROOT_BINDIR=|FAKEROOT_BINDIR=${SNAP}|g' \
          ${CRAFT_PART_INSTALL}/usr/bin/fakeroot-sysv
      ln -sf fakeroot-sysv ${CRAFT_PART_INSTALL}/usr/bin/fakeroot
      # fix ssh_import_id search path for etc/ssh/ssh_import_id
      sed -i \
          's|\(conf_file = \).*|\1os.path.join(os.getenv("SNAP"), "etc/ssh/ssh_import_id")|g' \
          ${CRAFT_PART_INSTALL}/usr/lib/python3/dist-packages/ssh_import_id/__init__.py
    stage:
      # make sure we do not have pulled in lsb_release, it makes no sense
      - -usr/bin/lsb_release

  glue:
    plugin: dump
    source: glue
    override-build: |
      craftctl default
      version=$(grep -m 1 "SCRIPT_VERSION=" ${CRAFT_PART_INSTALL}/usr/bin/uc-image | awk -F '=' '{print $2}')
      craftctl set version="${version}"

  snap-client:
    plugin: nil
    override-build: |
      # determine latest release version
      latest_release=$(git ls-remote --refs  --sort='version:refname' https://github.com/canonical/snapd.git "refs/heads/release/*" | tail -1 | awk -F '/' '{print $3"/"$4}')
      export GOPATH="${CRAFT_PART_BUILD}/go"
      mkdir -p ${CRAFT_PART_BUILD}/go/src/github.com/snapcore
      git clone --depth=1 https://github.com/canonical/snapd.git -b ${latest_release} ${CRAFT_PART_BUILD}/go/src/github.com/snapcore/snapd
      cd ${CRAFT_PART_BUILD}/go/src/github.com/snapcore/snapd
      ./get-deps.sh
      export GOARCH=${CRAFT_ARCH_BUILD_FOR}
      export CGO_ENABLED=1
      export CC=${CRAFT_ARCH_TRIPLET_BUILD_FOR}-gcc
      export FARCH=${CRAFT_ARCH_BUILD_FOR}
      mkdir -p ${CRAFT_PART_INSTALL}/usr/lib/snapd
      go build -mod=vendor  -buildmode=pie -tags nomanagers -ldflags "-s -w"  -o  ${CRAFT_PART_INSTALL}/usr/bin/snap ${PWD}/cmd/snap

  yq:
    plugin: go
    source: https://github.com/mikefarah/yq.git
    override-pull: |
      # pull latest tag
      git_url="https://github.com/mikefarah/yq.git"
      tag_version="v4"
      tag=$(git ls-remote --tags --refs  \
                          --sort='version:refname' \
                          "${git_url}" \
                          "refs/tags/${tag_version}*" \
            | tail -1 \
            | awk -F '/' '{print $3}')
      git clone ${git_url} --depth=1 --branch "${tag}" "${CRAFT_PART_SRC}"
    organize:
      bin/yq: usr/bin/yq

  builder-dependencies:
    plugin: nil
    stage-packages:
      - rhash

  gcc:
    plugin: nil
    override-build: |
      # gcc dependency is only for amba builds and supported on arm64 and amd64 only...
      # for native case, we need to rename things, to maintain same build scripts
      release=""
      if [ "${SNAP_ARCH}" == "arm64" ]; then
        release="gcc-linaro-11.2.1-2021.10-aarch64_aarch64-unknown-linux-gnu"
      elif [ "${SNAP_ARCH}" == "amd64" ]; then
        release="gcc-linaro-11.2.1-2021.10-x86_64_aarch64-linux-gnu"
      fi
      if [ -n "${release}" ]; then
        url="https://people.canonical.com/~okubik/toolchains/${release}.tar.xz"
        curl -s -L ${url} | tar -xJ \
              --strip-components=1 \
              -C ${CRAFT_PART_INSTALL} \
              --wildcards "*/aarch64*-linux-gnu/bin/as" \
              --wildcards "*/aarch64*-linux-gnu/bin/ld" \
              --wildcards "*/bin/aarch64*-linux-gnu-gcc" \
              --wildcards "*/bin/*objcopy" \
              --wildcards "*/bin/*strip" \
              --wildcards "*/libexec/gcc/aarch64*-linux-gnu/*/cc1" \
              --wildcards "*/libexec/gcc/aarch64*-linux-gnu/*/liblto_plugin.so*"
        if [ "${CRAFT_ARCH_BUILD_FOR}" == "arm64" ]; then
          mv ${CRAFT_PART_INSTALL}/aarch64-unknown-linux-gnu ${CRAFT_PART_INSTALL}/aarch64-linux-gnu
          mv ${CRAFT_PART_INSTALL}/bin/aarch64-unknown-linux-gnu-gcc ${CRAFT_PART_INSTALL}/bin/aarch64-linux-gnu-gcc
          mv ${CRAFT_PART_INSTALL}/bin/objcopy ${CRAFT_PART_INSTALL}/bin/aarch64-linux-gnu-objcopy
          mv ${CRAFT_PART_INSTALL}/bin/strip ${CRAFT_PART_INSTALL}/bin/aarch64-linux-gnu-strip
        fi
      fi

  android-mkfs-tools:
    plugin: nil
    stage-packages:
      - android-sdk-platform-tools

  lk-boot-env:
    plugin: nil
    override-pull: |
      wget https://raw.githubusercontent.com/snapcore/snapd/master/include/lk/snappy_boot_common.h
      wget https://raw.githubusercontent.com/snapcore/snapd/master/include/lk/snappy_boot_v2.h
      wget https://raw.githubusercontent.com/kubiko/dragonboard-gadget/20-lk/snap-boot-sel/lk-boot-env.c
    override-build: |
      mkdir -p ${CRAFT_PART_INSTALL}/usr/bin
      gcc lk-boot-env.c -I/usr/include/ -Iapp/aboot -o ${CRAFT_PART_INSTALL}/usr/bin/lk-boot-env

build-snaps:
  - go/latest/stable

build-packages:
  - curl
  - linux-libc-dev
  - wget
