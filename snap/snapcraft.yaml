name: uc-image
summary: Custom ubuntu core image buider
description: |
 Toolset to build emmc ubuntu core images for various boards, supporting custom flash tools.
 Created images can be used with tools like fastboot, uuu(mfgtools)

confinement: strict
grade: stable
adopt-info: glue

environment:
    PATH:            $SNAP/usr/sbin:$SNAP/usr/bin:$SNAP/sbin:$SNAP/bin:$SNAP/${SNAPCRAFT_ARCH_TRIPLET}/bin:$PATH:$SNAP/aarch64-linux-gnu/bin
    LD_LIBRARY_PATH: $SNAP_LIBRARY_PATH:$LD_LIBRARY_PATH:$SNAP/lib:$SNAP/usr/lib:$SNAP/lib/${SNAPCRAFT_ARCH_TRIPLET}:$SNAP/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}:$SNAP/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/android
    LANG:            C
    PYTHONPATH:      $SNAP/usr/lib/python3/dist-packages

base: core20

layout:
  /etc/mke2fs.conf:
    bind-file: $SNAP/etc/mke2fs.conf
  /etc/mtools.conf:
    bind-file: $SNAP/etc/mtools.conf

apps:
    uc-image:
        command: bin/uc-image
        adapter: none
        plugs:
            - home
            - mount-observe
            - network-observe
            - removable-media
            - ssh-public-keys

architectures:
    - build-on: arm64
    - build-on: armhf
    - build-on: amd64

parts:
  tools:
    plugin: nil
    stage-packages:
      - e2fsprogs
      - libfdisk1
      - libuuid1
      - libblkid1
      - libcomerr2
      - libudev1
      - zlib1g
      - liblzma5
      - e2fslibs
      - img2simg
      - simg2img
      - android-libsparse
      - mtools
      - squashfs-tools
      - dosfstools
      - gdisk
      - fakeroot
      - openssh-client
      - ssh-import-id
      - ca-certificates
      - wget
      - xdelta3
      - xz-utils
    override-build: |
      sed -i \
          -e 's|/usr/lib/|${SNAP}/usr/lib/|g' \
          -e 's|FAKEROOT_PREFIX=|FAKEROOT_PREFIX=${SNAP}|g' \
          -e 's|FAKEROOT_BINDIR=|FAKEROOT_BINDIR=${SNAP}|g' \
          ${SNAPCRAFT_PART_INSTALL}/usr/bin/fakeroot-sysv
      ln -sf fakeroot-sysv ${SNAPCRAFT_PART_INSTALL}/usr/bin/fakeroot
      # fix ssh_import_id search path for etc/ssh/ssh_import_id
      sed -i \
          's|\(conf_file = \).*|\1os.path.join(os.getenv("SNAP"), "etc/ssh/ssh_import_id")|g' \
          ${SNAPCRAFT_PART_INSTALL}/usr/lib/python3/dist-packages/ssh_import_id/__init__.py
    stage:
      # make sure we do not have pulled in lsb_release, it makes no sense
      - -usr/bin/lsb_release

  glue:
    plugin: dump
    source: glue
    override-build: |
      snapcraftctl build
      version=$(grep -m 1 "SCRIPT_VERSION=" ${SNAPCRAFT_PART_INSTALL}/bin/uc-image | awk -F '=' '{print $2}')
      snapcraftctl set-version ${version}

  snap-client:
    plugin: nil
    override-build: |
      SNAPPY_STORE_NO_CDN=1 snap download snapd --edge
      unsquashfs -f -d ${SNAPCRAFT_PART_INSTALL} snapd*.snap usr/bin/snap

  yq:
    plugin: nil
    override-build: |
      SNAPPY_STORE_NO_CDN=1 snap download yq
      unsquashfs -f -d ${SNAPCRAFT_PART_INSTALL} yq*.snap bin/yq

  builder-dependencies:
    plugin: nil
    stage-packages:
      - rhash

  etc-assets:
    plugin: nil
    override-build: |
      # copy etc assets from core18 we might need during backdoor tasks
      mkdir -p ${SNAPCRAFT_PART_INSTALL}/etc/ssh
      cp -r /snap/core20/current/etc/skel ${SNAPCRAFT_PART_INSTALL}/etc
      cp /snap/core20/current/etc/ssh/sshd_config ${SNAPCRAFT_PART_INSTALL}/etc/ssh

  gcc:
    plugin: nil
    override-build: |
      # gcc dependency is only for amba builds and supported on arm64 and amd64 only...
      # for native case, we need to rename things, to maintain same build scripts
      release=""
      if [ "${SNAP_ARCH}" == "arm64" ]; then
        release="gcc-linaro-11.2.1-2021.10-aarch64_aarch64-unknown-linux-gnu"
      elif [ "${SNAP_ARCH}" == "amd64" ]; then
        release="gcc-linaro-11.2.1-2021.10-x86_64_aarch64-linux-gnu"
      fi
      if [ -n "${release}" ]; then
        url="https://people.canonical.com/~okubik/toolchains/${release}.tar.xz"
        wget -c ${url} -O - | tar -xJ \
              --strip-components=1 \
              -C ${SNAPCRAFT_PART_INSTALL} \
              --wildcards "*/aarch64*-linux-gnu/bin/as" \
              --wildcards "*/aarch64*-linux-gnu/bin/ld" \
              --wildcards "*/bin/aarch64*-linux-gnu-gcc" \
              --wildcards "*/bin/*objcopy" \
              --wildcards "*/bin/*strip" \
              --wildcards "*/libexec/gcc/aarch64*-linux-gnu/*/cc1" \
              --wildcards "*/libexec/gcc/aarch64*-linux-gnu/*/liblto_plugin.so*"
        if [ "${SNAP_ARCH}" == "arm64" ]; then
          mv ${SNAPCRAFT_PART_INSTALL}/aarch64-unknown-linux-gnu ${SNAPCRAFT_PART_INSTALL}/aarch64-linux-gnu
          mv ${SNAPCRAFT_PART_INSTALL}/bin/aarch64-unknown-linux-gnu-gcc ${SNAPCRAFT_PART_INSTALL}/bin/aarch64-linux-gnu-gcc
          mv ${SNAPCRAFT_PART_INSTALL}/bin/objcopy ${SNAPCRAFT_PART_INSTALL}/bin/aarch64-linux-gnu-objcopy
          mv ${SNAPCRAFT_PART_INSTALL}/bin/strip ${SNAPCRAFT_PART_INSTALL}/bin/aarch64-linux-gnu-strip
        fi
      fi

  android-mkfs-tools:
    plugin: nil
    stage-packages:
      - android-sdk-ext4-utils

build-packages:
  - wget
